/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Modelo.Conexion;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;


public class Caja extends javax.swing.JDialog {
    
    private Connection con;
    private int usuarioId; // ID del usuario actual
    private boolean estaAbierta;
    private int cajaActualId;


    public Caja(java.awt.Frame parent, boolean modal,int usuarioId) {
        super(parent, modal);
        initComponents();
        this.usuarioId = usuarioId;
        this.setLocationRelativeTo(null);
        this.setTitle("Control de Caja");
        inicializarComponentes();
        verificarEstadoCaja();
    }
    
     private void inicializarComponentes() {
        // Renombrar componentes para mejor claridad
        jLabel1.setText("CONTROL DE CAJA");
        jButton1.setText("PROCESAR");
        
        // Deshabilitar campo de monto final inicialmente
        jTextField2.setEnabled(false);
        
        // Configurar formato para aceptar solo números y decimales
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                char c = evt.getKeyChar();
                if (!((c >= '0' && c <= '9') || c == '.' || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
                    evt.consume();
                }
                // Solo permite un punto decimal
                if (c == '.' && jTextField1.getText().contains(".")) {
                    evt.consume();
                }
            }
        });
        
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                char c = evt.getKeyChar();
                if (!((c >= '0' && c <= '9') || c == '.' || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
                    evt.consume();
                }
                if (c == '.' && jTextField2.getText().contains(".")) {
                    evt.consume();
                }
            }
        });
    }

    private void verificarEstadoCaja() {
        try {
            con = new Conexion().getConnection();
            String sql = "SELECT id, monto_inicial FROM caja WHERE usuario_id = ? AND estado = 'abierta'";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setInt(1, usuarioId);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                // Existe una caja abierta
                estaAbierta = true;
                cajaActualId = rs.getInt("id");
                jTextField1.setText(rs.getString("monto_inicial"));
                jTextField1.setEnabled(false);
                jTextField2.setEnabled(true);
                jLabel1.setText("CIERRE DE CAJA");
            } else {
                // No hay caja abierta
                estaAbierta = false;
                jTextField1.setEnabled(true);
                jTextField2.setEnabled(false);
                jTextField1.setText("");
                jTextField2.setText("");
                jLabel1.setText("APERTURA DE CAJA");
            }
            rs.close();
            ps.close();
            con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al verificar estado de caja: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("CAJA");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("MONTO INICIAL");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("MONTO FINAL");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(jTextField2))
                .addGap(80, 80, 80))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(92, 92, 92)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
     private void abrirCaja() {
        if (jTextField1.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar el monto inicial");
            return;
        }

        try {
            double montoInicial = Double.parseDouble(jTextField1.getText());
            con = new Conexion().getConnection();
            String sql = "INSERT INTO caja (usuario_id, monto_inicial, fecha_apertura, estado) VALUES (?, ?, NOW(), 'abierta')";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setInt(1, usuarioId);
            ps.setDouble(2, montoInicial);
            
            if (ps.executeUpdate() > 0) {
                JOptionPane.showMessageDialog(this, "Caja abierta exitosamente");
                verificarEstadoCaja();
            }
            
            ps.close();
            con.close();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El monto inicial debe ser un número válido");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al abrir caja: " + ex.getMessage());
        }
    }

    private void cerrarCaja() {
        if (jTextField2.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar el monto final");
            return;
        }

        try {
            double montoFinal = Double.parseDouble(jTextField2.getText());
            con = new Conexion().getConnection();
            
            // Primero obtener el total de ventas
            String sqlVentas = "SELECT COALESCE(SUM(total), 0) as total FROM ventas WHERE caja_id = ?";
            PreparedStatement psVentas = con.prepareStatement(sqlVentas);
            psVentas.setInt(1, cajaActualId);
            ResultSet rs = psVentas.executeQuery();
            double totalVentas = rs.next() ? rs.getDouble("total") : 0;
            
            // Actualizar la caja
            String sql = "UPDATE caja SET monto_final = ?, fecha_cierre = NOW(), estado = 'cerrada', total_ventas = ? WHERE id = ?";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setDouble(1, montoFinal);
            ps.setDouble(2, totalVentas);
            ps.setInt(3, cajaActualId);
            
            if (ps.executeUpdate() > 0) {
                double montoInicial = Double.parseDouble(jTextField1.getText());
                String mensaje = String.format("Caja cerrada exitosamente\nMonto Inicial: %.2f\nTotal Ventas: %.2f\nMonto Final: %.2f", 
                    montoInicial, totalVentas, montoFinal);
                JOptionPane.showMessageDialog(this, mensaje);
                this.dispose();
            }
            
            rs.close();
            psVentas.close();
            ps.close();
            con.close();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El monto final debe ser un número válido");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cerrar caja: " + ex.getMessage());
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (!estaAbierta) {
            abrirCaja();
        } else {
            cerrarCaja();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Caja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Caja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Caja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Caja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Caja dialog = new Caja(new javax.swing.JFrame(), true,1);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
